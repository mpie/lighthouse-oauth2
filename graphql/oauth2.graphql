extend type Mutation {
    getToken(input: CodeInput @spread): AuthPayload! @field(resolver: "Mpie\\LighthouseOAuth\\GraphQL\\Mutations\\Authorize@resolve")
    login(input: LoginInput @spread): TokenPayload! @field(resolver: "Mpie\\LighthouseOAuth\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Mpie\\LighthouseOAuth\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Mpie\\LighthouseOAuth\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Mpie\\LighthouseOAuth\\GraphQL\\Mutations\\ForgotPassword@resolve")
#    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Mpie\\LighthouseOAuth\\GraphQL\\Mutations\\ResetPassword@resolve")
#    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Mpie\\LighthouseOAuth\\GraphQL\\Mutations\\Register@resolve")
#    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Mpie\\LighthouseOAuth\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard
}

input CodeInput {
    code: String!
}

input LoginInput {
    username: String!
    password: String!
}

input RefreshTokenInput {
    refresh_token: String
}

type AuthPayload {
    access_token: String
    refresh_token: String
    expires_in: Int
    token_type: String
}

type TokenPayload {
    access_token: String
    refresh_token: String
    expires_in: Int
    token_type: String
#    user: User
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

type LogoutResponse {
    message: String
}

type ForgotPasswordResponse {
    message: String
}

type RegisterResponse {
    tokens: AuthPayload
    status: RegisterStatuses!
}

type UpdatePasswordResponse {
    message: String
}

enum RegisterStatuses {
    MUST_VERIFY_EMAIL
    SUCCESS
}

input ForgotPasswordInput {
    email: String! @rules(apply: ["required", "email"])
}

input NewPasswordWithCodeInput {
    email: String! @rules(apply: ["required", "email"])
    token: String! @rules(apply: ["required", "string"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input RegisterInput {
    name: String! @rules(apply: ["required", "string"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input UpdatePassword {
    old_password: String!
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}
